// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v4.25.4
// source: simple.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import Long = require("long");

export const protobufPackage = "";

export interface test1 {
  testVar: number;
}

export interface test2 {
  testVariable: number;
}

function createBasetest1(): test1 {
  return { testVar: 0 };
}

export const test1 = {
  encode(message: test1, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.testVar !== 0) {
      writer.uint32(8).int64(message.testVar);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): test1 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasetest1();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.testVar = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): test1 {
    return { testVar: isSet(object.testVar) ? globalThis.Number(object.testVar) : 0 };
  },

  toJSON(message: test1): unknown {
    const obj: any = {};
    if (message.testVar !== 0) {
      obj.testVar = Math.round(message.testVar);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<test1>, I>>(base?: I): test1 {
    return test1.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<test1>, I>>(object: I): test1 {
    const message = createBasetest1();
    message.testVar = object.testVar ?? 0;
    return message;
  },
};

function createBasetest2(): test2 {
  return { testVariable: 0 };
}

export const test2 = {
  encode(message: test2, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.testVariable !== 0) {
      writer.uint32(16).int64(message.testVariable);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): test2 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasetest2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.testVariable = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): test2 {
    return { testVariable: isSet(object.testVariable) ? globalThis.Number(object.testVariable) : 0 };
  },

  toJSON(message: test2): unknown {
    const obj: any = {};
    if (message.testVariable !== 0) {
      obj.testVariable = Math.round(message.testVariable);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<test2>, I>>(base?: I): test2 {
    return test2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<test2>, I>>(object: I): test2 {
    const message = createBasetest2();
    message.testVariable = object.testVariable ?? 0;
    return message;
  },
};

export interface serv {
  Changenumber(request: test1): Promise<test2>;
}

export const servServiceName = "serv";
export class servClientImpl implements serv {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || servServiceName;
    this.rpc = rpc;
    this.Changenumber = this.Changenumber.bind(this);
  }
  Changenumber(request: test1): Promise<test2> {
    const data = test1.encode(request).finish();
    const promise = this.rpc.request(this.service, "Changenumber", data);
    return promise.then((data) => test2.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
